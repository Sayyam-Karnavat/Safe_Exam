from flask import Flask, jsonify, request
from flask_cors import CORS
from flask_socketio import SocketIO
import sqlite3
import metadata
import json
from USER import generate_users

app = Flask(__name__)
CORS(app=app)
socketApp = SocketIO(app, cors_allowed_origins="*")


###########################################################################


# This function will generated user with all blockchain details
user_list = ['sanyam' , 'admin']
if False: generate_users(users_names_list=user_list)

#############################################################################

# Load validated user json file generated by "generate_users()" function
with open("valid_users.json" , "r") as f:
    all_valid_users = json.load(fp=f)
    f.close()

###########################################################################
# Exam title , Start and End-Time

Exam_Name = metadata.Exam_Title
exam_start_time = metadata.exam_start_time
exam_end_time = metadata.exam_end_time


# Exam question and answer data
question_answer_data = metadata.quiz_data

#############################################################################


def get_quiz_db_connection():
    return sqlite3.connect("Quiz.db", check_same_thread=False)

@app.route("/")
def index():
    return "Socket server is running!"


@app.route("/validate_user" , methods=['POST'])
def validate_user():
    user_details = request.get_json()
    user_id = user_details['user_id']
    user_password = user_details['password']


    valid_password = all_valid_users.get(user_id).get("password" , None)


    if valid_password :
        print("Valid password :-" , valid_password)
        if user_password == valid_password:
            return jsonify({"Success" :"User Validated"}) , 200
        else:
            return jsonify({"ValidationError" : "Incorrect password !!!"}) , 400
    else:
        return jsonify({"ValidationError" : "User Not Found !!!"}) , 400


@app.route("/show_suspicious_user", methods=['POST'])
def show_suspicious_user():
    try:
        # Retrieve the JSON data sent in the POST request
        user_data = request.get_json()

        # Extract the required fields from the JSON data
        student_id = user_data['student_id']
        wallet_address = user_data['wallet_address']
        exam_title = user_data['exam_title']
        booklet = user_data['booklet']
        suspicious_data = user_data['suspicious_activity_detected']
        city = "-"
        center= "-"


        
        # Connect to the database
        conn = get_quiz_db_connection()
        cursor = conn.cursor()

        # Execute the SQL query to insert data into the table
        cursor.execute("""
            INSERT INTO STUDENT_DATA(student_id, wallet_address, exam_title, city, center_name, booklet, suspicious_activity_detected)
            VALUES (?, ?, ?, ?, ? , ? , ?)
        """, (student_id, wallet_address, exam_title, city , center, booklet, suspicious_data))
        
        # Commit the transaction and close the connection
        conn.commit()
        conn.close()

        # Return success message
        return jsonify({"Success": "Suspicious User data received!!!"})
    except Exception as e:
        return jsonify({"Error": f"Error showing suspicious user: {str(e)}"})
    


    

@app.route("/get_question_answer" , methods =['GET'])
def get_question_answer():
    return question_answer_data
    

@app.route("/exam_data", methods=['GET'])
def exam_start():
    global exam_end_time, Exam_Name
    try:
        exam_json = {
            "exam_start_time": exam_start_time,
            "exam_name": Exam_Name,
            "exam_end_time": exam_end_time
        }
        socketApp.emit("exam_start", exam_json)
        return jsonify(exam_json), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 400

@app.route("/get_all_quiz_data")
def get_quiz_data():
    try:
        conn = get_quiz_db_connection()
        cursor = conn.cursor()
        all_rows = cursor.execute("SELECT * FROM STUDENT_DATA").fetchall()
        student_data = [
            {
                "student_id": row[0],
                "wallet_address": row[1],
                "exam_title": row[2],
                "city": row[3],
                "center_name": row[4],
                "booklet": row[5],
                "start_time": row[6],
                "que_ans": row[7],
                "suspicious_activity_detected": row[8],
                "end_time": row[9],
                "transaction_id": row[10],
            }
            for row in all_rows
        ]
        conn.close()
        return jsonify(student_data), 200
    except sqlite3.Error as e:
        return jsonify({"error": str(e)}), 500
    
@app.route("/get_all_quiz_dummy_data")
def get_quiz_dummy_data():
    try:
        with open('StudentData.json', 'r') as file:
            all_rows = json.load(file)
        student_data = [
            {
               "student_id": row.get("student_id"),
                "wallet_address": row.get("wallet_address"),
                "exam_title": row.get("exam_title"),
                "city": row.get("city"),
                "center_name": row.get("center_name"),
                "booklet": row.get("booklet"),
                "start_time": row.get("start_time"),
                "que_ans": row.get("que_ans"),
                "suspicious_activity_detected": row.get("suspicious_activity_detected"),
                "end_time": row.get("end_time"),
                "transaction_id": row.get("transaction_id"),
            }
            for row in all_rows
        ]
        return jsonify(student_data), 200
    except sqlite3.Error as e:
        return jsonify({"error": str(e)}), 500
    
@app.route("/get_dummy_wallet_data/<wallet_address>", methods=['GET'])
def get_dummy_wallet_data(wallet_address):
    try:
        with open('StudentData.json', 'r') as file:
            all_rows = json.load(file)
        student_data = [
            {
                 "student_id": row["student_id"],
                "wallet_address": row["wallet_address"],
                "exam_title": row["exam_title"],
                "city": row["city"],
                "center_name": row["center_name"],
                "booklet": row["booklet"],
                "start_time": row["start_time"],
                "que_ans": row["que_ans"],
                "suspicious_activity_detected": row["suspicious_activity_detected"],
                "end_time": row["end_time"],
                "transaction_id": row["transaction_id"],
            }
            for row in all_rows if row["wallet_address"] == wallet_address
        ]
        return jsonify(student_data), 200
    except sqlite3.Error as e:
        return jsonify({"error": str(e)}), 500

@app.route("/get_wallet_data/<wallet_address>", methods=['GET'])
def get_wallet_data(wallet_address):
    try:
        conn = get_quiz_db_connection()
        cursor = conn.cursor()
        all_rows = cursor.execute("SELECT * FROM STUDENT_DATA WHERE wallet_address=?", (wallet_address,)).fetchall()
        student_data = [
            {
                "student_id": row[0],
                "wallet_address": row[1],
                "exam_title": row[2],
                "city": row[3],
                "center_name": row[4],
                "booklet": row[5],
                "start_time": row[6],
                "que_ans": row[7],
                "suspicious_activity_detected": row[8],
                "end_time": row[9],
                "transaction_id": row[10],
            }
            for row in all_rows
        ]

        conn.close()
        return jsonify(student_data), 200
    except sqlite3.Error as e:
        return jsonify({"error": str(e)}), 500

@app.route("/get_starttime_AI_data/", methods=['GET'])
def get_specific_time_and_AI_data():
    try:
        conn = get_quiz_db_connection()
        cursor = conn.cursor()
        all_rows = cursor.execute('SELECT student_id , wallet_address ,start_time , suspicious_activity_detected, end_time , transaction_id FROM STUDENT_DATA WHERE start_time <> "-" or end_time <> "-" or suspicious_activity_detected= "yes"').fetchall()
        student_data = [
            {
                "student_id": row[0],
                "wallet_address": row[1],
                "start_time": row[2],
                "suspicious_activity_detected": row[3],
                "end_time": row[4],
                "transaction_id": row[5],
            }
            for row in all_rows
        ]
        conn.close()
        return jsonify(student_data), 200
    except sqlite3.Error as e:
        return jsonify({"error": str(e)}), 500

def create_table_if_not_exists():
    try:
        conn = get_quiz_db_connection() 
        cobj = conn.cursor()
        table = """
        CREATE TABLE IF NOT EXISTS STUDENT_DATA(
            student_id TEXT, 
            wallet_address TEXT,
            exam_title TEXT,
            city TEXT,
            center_name TEXT,
            booklet TEXT,
            start_time TEXT,
            que_ans TEXT,
            suspicious_activity_detected TEXT,
            end_time TEXT,
            transaction_id TEXT
        )
        """
        cobj.execute(table)
        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        print(f"Error occurred while creating the table: {e}")


@app.route("/insert_data", methods=['POST'])
def insert_data():
    try:
        # Get the JSON data from the POST request
        json_student_data = request.get_json()

        # Extract values from the JSON, using default values where needed
        student_id = json_student_data.get('student_id', "-")
        exam_title = json_student_data.get('exam_title', "-")
        city = json_student_data.get('city', "-")
        center_name = json_student_data.get('center_name', "-")
        booklet = json_student_data.get('booklet', "-")
        start_time = json_student_data.get('start_time', "-")
        que_ans = json_student_data.get('que_ans', "-")
        end_time = json_student_data.get('end_time', "-")
        suspicious_activity_detected = json_student_data.get('suspicious_activity_detected', "-")
        wallet_address = json_student_data.get('wallet_address', "-")
        transaction_id = json_student_data.get('transaction_id', "-")
        # Not to be inserted due to security reasons
        user_mnemonic = json_student_data.get("user_mnemonic", "-")  # This should not be used in your insert
        
        # Open a database connection
        conn = get_quiz_db_connection()
        cursor = conn.cursor()

        # Insert data into the database using a parameterized query to avoid SQL injection
        insert_query = """
        INSERT INTO STUDENT_DATA (
            student_id, wallet_address, exam_title, city, center_name, 
            booklet, start_time, que_ans, suspicious_activity_detected, 
            end_time, transaction_id
        ) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        cursor.execute(insert_query, (
            student_id, wallet_address, exam_title, city, center_name, 
            booklet, start_time, que_ans, suspicious_activity_detected, 
            end_time,transaction_id   # You might need to adjust this part, for example if you want transaction_id or other security-related fields
        ))

        # Commit the transaction
        conn.commit()
        conn.close()
        # Return a success response
        return jsonify({"message": "Data inserted successfully"}), 200

    except sqlite3.Error as e:
        print(f"Database error occurred: {e}")
        return jsonify({"error": "Database error occurred, please try again later"}), 500
    except Exception as e:
        print(f"Error occurred: {e}")
        return jsonify({"error": "An error occurred, please check the input and try again"}), 400



def delete_all_records():
    try:
        with get_quiz_db_connection() as conn:
            cobj = conn.cursor()
            cobj.execute("DELETE FROM STUDENT_DATA")
            conn.commit()
            print("All records deleted successfully.")
    except sqlite3.Error as e:
        print(f"Error occurred while deleting all records: {e}")

if __name__ == "__main__":
    create_table_if_not_exists()
    try:
        print("Quiz socket running !!!!")
        socketApp.run(app, host="0.0.0.0", port=2222, debug=False)
    except KeyboardInterrupt as e:
        print("Server Stopped !!!")